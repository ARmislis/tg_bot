from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from utils.api import request, unwrap
from utils.redis_client import get_customer_id
from utils.keyboards import login_inline_kb
from utils.qr import make_qr_input_file

router = Router()


# ===== Helper –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ =====
def make_progress_bar(current: int, total: int) -> str:
    if not isinstance(current, int) or not isinstance(total, int) or total <= 0:
        return "‚Äî"
    current = max(0, min(current, total))
    filled = "üîò" * current
    empty = "‚ö™" * (total - current)
    return f"{filled}{empty} ({current}/{total})"


# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ =====
async def mycards_cmd(message: Message):
    customer_id = await get_customer_id(message.chat.id)
    if not customer_id:
        await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.", reply_markup=login_inline_kb())
        return

    status, payload = await request(
        message.chat.id, "GET", f"/customers/{customer_id}/cards/", params={"limit": 100, "offset": 0}
    )
    if status == 403:
        await message.answer("üîê –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=login_inline_kb())
        return
    if status != 200:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ (status={status}).")
        return

    cards = unwrap(payload, as_list=True) or []

    if not cards:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    for c in cards:
        cid = c.get("id")
        card_name = c.get("name", "‚Äî")
        reward_name = c.get("reward_name") or "–ù–∞–≥—Ä–∞–¥–∞"
        current = c.get("current_stamp_count")
        total = c.get("total_stamp_count")

        bar = make_progress_bar(current, total)

        filled = (
            isinstance(current, int)
            and isinstance(total, int)
            and total > 0
            and current >= total
        )

        if filled:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
            text = f"üèÜ <b>{reward_name}</b>\n–ö–∞—Ä—Ç–∞: {card_name}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar}"
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text=f"üéÅ {reward_name}",
                    callback_data=f"qr:redeem:{cid}"
                )
            ]])
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ä—Ç–µ
            text = f"üé¥ <b>{card_name}</b>\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar}"
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text=f"üì≤ {card_name}",
                    callback_data=f"qr:stamp:{cid}"
                )
            ]])

        await message.answer(text, reply_markup=kb)


# ===== –ö–æ–º–∞–Ω–¥–∞ /mycards =====
@router.message(Command("mycards"))
async def mycards_command_entry(message: Message):
    await mycards_cmd(message)


# ===== –ö–æ–ª–ª–±—ç–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã =====
@router.callback_query(F.data.startswith("card:open:"))
async def open_card(cb: CallbackQuery):
    try:
        _, _, card_id = cb.data.split(":", 2)
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    customer_id = await get_customer_id(cb.message.chat.id)
    if not customer_id:
        await cb.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.", reply_markup=login_inline_kb())
        await cb.answer()
        return

    status, payload = await request(cb.message.chat.id, "GET", f"/customers/{customer_id}/cards/{card_id}")
    if status == 403:
        await cb.message.answer("üîê –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=login_inline_kb())
        await cb.answer()
        return
    if status != 200:
        await cb.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.")
        await cb.answer()
        return

    card = unwrap(payload) or {}
    card_name = card.get("name", "‚Äî")
    reward_name = card.get("reward_name") or "–ù–∞–≥—Ä–∞–¥–∞"
    current = card.get("current_stamp_count")
    total = card.get("total_stamp_count")

    bar = make_progress_bar(current, total)

    text = f"ü™™ <b>{card_name}</b>\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {bar}"

    filled = (
        isinstance(current, int)
        and isinstance(total, int)
        and total > 0
        and current >= total
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"üéÅ {reward_name}" if filled else f"üì≤ {card_name}",
            callback_data=f"qr:redeem:{card_id}" if filled else f"qr:stamp:{card_id}"
        )
    ]])

    await cb.message.answer(text, reply_markup=kb)
    await cb.answer()


# ===== –ö–æ–ª–ª–±—ç–∫ –¥–ª—è QR =====
@router.callback_query(F.data.startswith("qr:"))
async def send_qr(cb: CallbackQuery):
    try:
        _, action, card_id = cb.data.split(":", 2)
        assert action in {"stamp", "redeem"}
    except Exception:
        await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    customer_id = await get_customer_id(cb.message.chat.id)
    if not customer_id:
        await cb.message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ.", reply_markup=login_inline_kb())
        await cb.answer()
        return

    # üîó –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è QR
    qr_text = f"https://api.forfriends.space/api/v1/customers/{customer_id}/cards/{card_id}/{action}"
    file = make_qr_input_file(qr_text, filename=f"{action}.png")

    caption = "‚úÖ –®—Ç–∞–º–ø –Ω–∞—á–∏—Å–ª–µ–Ω" if action == "stamp" else "üéÅ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"
    await cb.message.answer_photo(photo=file, caption=caption)
    await cb.answer()
