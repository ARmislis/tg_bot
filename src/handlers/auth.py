import re
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.api import request
from utils.redis_client import set_customer_id, get_customer_id, clear_customer
from utils.keyboards import (
    main_menu_reply_auth,
    main_menu_reply_unauth,
)

router = Router()

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è =====

class RegisterFlow(StatesGroup):
    name = State()
    birth_date = State()
    phone = State()
    password = State()

class LoginFlow(StatesGroup):
    phone = State()
    password = State()

PHONE_PATTERN = re.compile(r"^\+7\d{10}$")
CODE_PATTERN = re.compile(r"^\d{4}$")  # —Ç–æ–ª—å–∫–æ 4 —Ü–∏—Ñ—Ä—ã


# ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ =====

@router.message(Command("cancel"))
async def cancel_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_reply_unauth())

def back_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

# ===== –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" =====

async def go_back(message: Message, state: FSMContext, flow: str):
    current = await state.get_state()

    if flow == "register":
        if current == RegisterFlow.birth_date.state:
            await state.set_state(RegisterFlow.name)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back_kb())
        elif current == RegisterFlow.phone.state:
            await state.set_state(RegisterFlow.birth_date)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=back_kb())
        elif current == RegisterFlow.password.state:
            await state.set_state(RegisterFlow.phone)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX):", reply_markup=back_kb(), input_field_placeholder="+7")

    elif flow == "login":
        if current == LoginFlow.password.state:
            await state.set_state(LoginFlow.phone)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX):", reply_markup=back_kb(), input_field_placeholder="+7")

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è =====

@router.message(Command("register"))
async def register_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=back_kb())
    await state.set_state(RegisterFlow.name)

@router.message(RegisterFlow.name, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=back_kb())
    await state.set_state(RegisterFlow.birth_date)

@router.message(RegisterFlow.name, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_back_name(message: Message, state: FSMContext):
    await cancel_cmd(message, state)

@router.message(RegisterFlow.birth_date, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_back_birth(message: Message, state: FSMContext):
    await go_back(message, state, "register")

@router.message(RegisterFlow.birth_date, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_birth(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text.strip(), "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –≤–∏–¥–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    await state.update_data(birth_date=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX):", reply_markup=back_kb(), input_field_placeholder="+7")
    await state.set_state(RegisterFlow.phone)

@router.message(RegisterFlow.phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_back_phone(message: Message, state: FSMContext):
    await go_back(message, state, "register")

@router.message(RegisterFlow.phone, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_PATTERN.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ +7XXXXXXXXXX")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 8 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–æ–ª–µ–µ:", reply_markup=back_kb())
    await state.set_state(RegisterFlow.password)

@router.message(RegisterFlow.password, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_back_password(message: Message, state: FSMContext):
    await go_back(message, state, "register")

@router.message(RegisterFlow.password, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def register_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    password = message.text.strip()
    phone = data["phone"]

    payload = {
        "name": data["name"],
        "birth_date": datetime.strptime(data["birth_date"], "%d.%m.%Y").strftime("%Y-%m-%dT00:00:00Z"),
        "phone": phone,
        "password": password,
        "language": "ru",
        "timezone": "Europe/Moscow",
    }

    status, resp = await request(message.chat.id, "POST", "/auth/customers/register", json=payload)

    if status in (200, 201) and isinstance(resp, dict):
        obj = resp.get("data") or resp
        customer_id = obj.get("id")
        await set_customer_id(message.chat.id, customer_id)



        sc_status, _ = await request(message.chat.id, "POST", f"/auth/customers/{customer_id}/send-code")

        if sc_status in (200, 204):
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ (—á–µ—Ä–µ–∑ 1:00)", callback_data="wait")]]
            )
            msg = await message.answer(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\nüìû –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫! –†–æ–±–æ—Ç –ø—Ä–æ–¥–∏–∫—Ç—É–µ—Ç –∫–æ–¥.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ 4 —Ü–∏—Ñ—Ä—ã –∏–∑ –∑–≤–æ–Ω–∫–∞.",
                reply_markup=kb
            )

            # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç
            for remaining in range(50, 0, -10):
                await asyncio.sleep(10)
                try:
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text=f"üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ (—á–µ—Ä–µ–∑ 0:{remaining:02d})", callback_data="wait")]]
                    )
                    await msg.edit_reply_markup(reply_markup=kb)
                except Exception:
                    break

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            kb_enabled = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="resend_code")]]
            )
            try:
                await msg.edit_reply_markup(reply_markup=kb_enabled)
            except Exception:
                pass
                # üîë —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π login, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏
        login_status, login_resp = await request(
            message.chat.id,
            "POST",
            "/auth/customers/login",
            json={"phone": phone, "password": password}
        )
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ({status}): <code>{resp}</code>")

    await state.clear()

# ===== –õ–æ–≥–∏–Ω =====

@router.message(Command("login"))
async def login_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX):", reply_markup=back_kb(), input_field_placeholder="+7")
    await state.set_state(LoginFlow.phone)

@router.message(LoginFlow.phone, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def login_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_PATTERN.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –≤–∏–¥–µ +7XXXXXXXXXX")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", reply_markup=back_kb())
    await state.set_state(LoginFlow.password)

@router.message(LoginFlow.phone, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def login_back_phone(message: Message, state: FSMContext):
    await cancel_cmd(message, state)

@router.message(LoginFlow.password, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def login_back_password(message: Message, state: FSMContext):
    await go_back(message, state, "login")

@router.message(LoginFlow.password, F.text != "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def login_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    phone, password = data["phone"], message.text.strip()

    status, resp = await request(
        message.chat.id, "POST", "/auth/customers/login", json={"phone": phone, "password": password}
    )

    if status == 200 and isinstance(resp, dict):
        obj = resp.get("data") or resp
        customer_id = obj.get("id")
        name_v = obj.get("name", "‚Äî")

        if customer_id:
            await set_customer_id(message.chat.id, customer_id)
            await message.answer(
                f"‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{name_v}</b>!",
                reply_markup=main_menu_reply_auth()
            )
        else:
            await message.answer("‚ö†Ô∏è –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ ({status}): <code>{resp}</code>")

    await state.clear()

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ 4 —Ü–∏—Ñ—Ä—ã) =====

@router.message(F.text.regexp(r"^\d{4}$"))
async def confirm_code(message: Message):
    customer_id = await get_customer_id(message.chat.id)
    if not customer_id:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    code = message.text.strip()
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ query string
    status, resp = await request(
        message.chat.id,
        "GET",
        f"/auth/customers/{customer_id}/confirm?code={code}"
    )

    if status == 200:
        await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", reply_markup=main_menu_reply_auth())
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({status}): <code>{resp}</code>")

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ =====

@router.callback_query(F.data == "resend_code")
async def resend_code(cb):
    customer_id = await get_customer_id(cb.message.chat.id)
    if not customer_id:
        await cb.answer("–°–Ω–∞—á–∞–ª–∞ /register –∏–ª–∏ /login", show_alert=True)
        return

    status, _ = await request(cb.message.chat.id, "POST", f"/auth/customers/{customer_id}/send-code")
    if status in (200, 204):
        await cb.message.answer("üì® –ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –∏ –≤–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã.")
        await cb.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞.")
        await cb.answer("–û—à–∏–±–∫–∞", show_alert=True)

# ===== –õ–æ–≥–∞—É—Ç =====

@router.message(Command("logout"))
async def logout_cmd(message: Message):
    # –Ω–∞–ø—Ä—è–º—É—é –¥–µ—Ä–≥–∞–µ–º forfriends.space/api/_flush_cookies, –º–∏–Ω—É—è request()
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://forfriends.space/api/_flush_cookies") as resp:
                status = resp.status
                text = await resp.text()
    except Exception as e:
        status = 500
        text = str(e)

    # —á–∏—Å—Ç–∏–º Redis
    await clear_customer(message.chat.id)

    if status in (200, 204):
        await message.answer("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=main_menu_reply_unauth())
    else:
        await message.answer(
            f"üîí –°–µ—Å—Å–∏—è –ª–æ–∫–∞–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–∞. –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª (status={status}): <code>{text}</code>",
            reply_markup=main_menu_reply_unauth()
        )
